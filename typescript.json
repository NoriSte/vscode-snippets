{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "tslint-console": {
    "prefix": "console",
    "description": "console.log eslint-friendly",
    "body": ["// tslint:disable-next-line:no-console", "console.${2:log}(${1:'log something'});$0"]
  },
  "reduce": {
    "prefix": "reduce",
    "description": "array.reduce",
    "body": [
      "const ${1:new} = ${2:array}!.reduce((acc:${3:any}[], item) => {",
      "  $0",
      "  acc.push(item);",
      "  return acc;",
      "}, []);"
    ]
  },
  "debugger": {
    "prefix": "debugger",
    "description": "A debugger statement without tslint worryings",
    "body": ["// TODO: remove it!!", "debugger; // tslint:disable-line"]
  },
  "logger.log": {
    "prefix": "logger.log",
    "description": "Log",
    "body": "logger.log($1);$0"
  },
  "import-logger": {
    "prefix": "import logger",
    "description": "Import Logger",
    "body": "import logger from '@/utils/logger';"
  }
}
